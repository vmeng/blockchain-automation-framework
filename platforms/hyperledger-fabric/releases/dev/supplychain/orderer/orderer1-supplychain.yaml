apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  name: supplychain-orderer1
  namespace: supplychain-net
  annotations:
    fluxcd.io/automated: "false"
spec:
  releaseName: supplychain-orderer1
  chart:
    git: https://github.com/vmeng/blockchain-automation-framework.git
    ref: local
    path: platforms/hyperledger-fabric/charts/orderernode
  values:
    metadata:
      namespace: supplychain-net
      images:
        orderer: hyperledger/fabric-orderer:2.2.0
        alpineutils: hyperledgerlabs/alpine-utils:1.0

    orderer:
      name: orderer1
      loglevel: info
      localmspid: supplychainMSP
      tlsstatus: true
      keepaliveserverinterval: 10s
    
    consensus:
      name: raft

    storage:
      storageclassname: supplychainsc
      storagesize: 512Mi  

    service:
      servicetype: ClusterIP
      ports:
        grpc:
          clusteripport: 7050

    vault:
      address: http://192.168.249.108:8200
      role: vault-role
      authpath: supplychain-net-auth
      secretprefix: secret/crypto/ordererOrganizations/supplychain-net/orderers/orderer1.supplychain-net
      imagesecretname: regcred
      serviceaccountname: vault-auth

    proxy:
      provider: none
      external_url_suffix: develop.local.com

    genesis: |-
      CiIaIAOYhV25EZSq55G9ndO4bFBCEWjBA30jkGVLKuRJQe3oEpB1Co11Cop1CngKWggBEAEaBgjw2YqDBiIKc3lzY2hhbm5lbCpAMTI2NDVhMzJlMTQyOGU3M2FmMjFlZDk2ODViM2FmZmI0NDY5M2Q1YjcxZDk3NzA2YmM2NjI1NzI0MzczNDdmMBIaEhimS+2tNmhHpfpSj2jAoP7kavW0wf2sfzMSjXQKinQSh3QS3SoKB09yZGVyZXIS0SoSrhYKDnN1cHBseWNoYWluTVNQEpsWGqcUCgNNU1ASnxQSlBQSkRQKDnN1cHBseWNoYWluTVNQEuEFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI5RENDQVp1Z0F3SUJBZ0lKQUwvd1hZQXF5OW9lTUFvR0NDcUdTTTQ5QkFNQ01GNHhDekFKQmdOVkJBWVQKQWtkQ01ROHdEUVlEVlFRSURBWk1iMjVrYjI0eER6QU5CZ05WQkFjTUJreHZibVJ2YmpFUU1BNEdBMVVFQ2d3SApUM0prWlhKbGNqRWJNQmtHQTFVRUF3d1NZMkV1YzNWd2NHeDVZMmhoYVc0dGJtVjBNQjRYRFRJeE1ETXpNREEwCk16VXdPVm9YRFRJME1ERXhPREEwTXpVd09Wb3dYakVMTUFrR0ExVUVCaE1DUjBJeER6QU5CZ05WQkFnTUJreHYKYm1SdmJqRVBNQTBHQTFVRUJ3d0dURzl1Wkc5dU1SQXdEZ1lEVlFRS0RBZFBjbVJsY21WeU1Sc3dHUVlEVlFRRApEQkpqWVM1emRYQndiSGxqYUdGcGJpMXVaWFF3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVFYCmVLMWpPd2toRGJ1Rk1HcXhtMWJOU3R3d1psL1VNSllTaXlTN1dzS3dGcWNtUzR0ejYvZlYxNmV2WmNqNU9zbGQKNlVRR1lZZ3VoMld6ZnVrN0xoUklvMEl3UURBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUE0R0ExVWREd0VCL3dRRQpBd0lCcGpBZEJnTlZIUTRFRmdRVURIMjlISVhLMFkzSlh0LzhCUFp1d2ZpUWFNQXdDZ1lJS29aSXpqMEVBd0lEClJ3QXdSQUlnUllwbm5DU01OemtRUzIvTFVCNnpaVTlOK0tHZTlPZXRkNHpJNmxDYW9Pd0NJQzRET3FHd0JCNWUKT2ZzMVpzRWtlZ2dmZnUrSkJqOW5nWWpmVFdhclFNSWQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoipggtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQzR6Q0NBb3FnQXdJQkFnSVVLbFNTZjlyNEtray93WmlyZE0wSkZhRlp1VUl3Q2dZSUtvWkl6ajBFQXdJdwpYakVMTUFrR0ExVUVCaE1DUjBJeER6QU5CZ05WQkFnTUJreHZibVJ2YmpFUE1BMEdBMVVFQnd3R1RHOXVaRzl1Ck1SQXdEZ1lEVlFRS0RBZFBjbVJsY21WeU1Sc3dHUVlEVlFRRERCSmpZUzV6ZFhCd2JIbGphR0ZwYmkxdVpYUXcKSGhjTk1qRXdNek13TURRME1EQXdXaGNOTWpJd016TXdNRFEwTlRBd1dqQnRNUXN3Q1FZRFZRUUdFd0pIUWpFYgpNQmtHQTFVRUJ4TVNOVEV1TlRBdkxUQXVNVE12VEc5dVpHOXVNUkF3RGdZRFZRUUtFd2RQY21SbGNtVnlNUTh3CkRRWURWUVFMRXdaamJHbGxiblF4SGpBY0JnTlZCQU1NRlVGa2JXbHVRSE4xY0hCc2VXTm9ZV2x1TFc1bGREQloKTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCUHI2SUkrUEJGSXJ0TXMyYlFXbWc0ZWcrMkgrd1BOKwo0RXVzV1p5MnFHR0gzb3Fxd0xXMmNoZ0x4aTZLVTBabE9WeGkwTElEY2xqeHlXbUN3RUhxeFd5amdnRVZNSUlCCkVUQU9CZ05WSFE4QkFmOEVCQU1DQjRBd0RBWURWUjBUQVFIL0JBSXdBREFkQmdOVkhRNEVGZ1FVa2syRGwrUGsKQ2ZvVUs2ODlWL213NDQydzVCQXdId1lEVlIwakJCZ3dGb0FVREgyOUhJWEswWTNKWHQvOEJQWnV3ZmlRYU1BdwpKQVlEVlIwUkJCMHdHNElaWTJFdGRHOXZiSE10T0RWaU9XSTBOV001T1MwMmVuSmtiRENCaWdZSUtnTUVCUVlICkNBRUVmbnNpWVhSMGNuTWlPbnNpWVdKaFl5NXBibWwwSWpvaWRISjFaU0lzSW1Ga2JXbHVJam9pZEhKMVpTSXMKSW1obUxrRm1abWxzYVdGMGFXOXVJam9pSWl3aWFHWXVSVzV5YjJ4c2JXVnVkRWxFSWpvaVFXUnRhVzVBYzNWdwpjR3g1WTJoaGFXNHRibVYwSWl3aWFHWXVWSGx3WlNJNkltTnNhV1Z1ZENKOWZUQUtCZ2dxaGtqT1BRUURBZ05ICkFEQkVBaUJQWVY3SEhtOWM2Zjh0QTZBRzJIQmI2ZFl2RExmM0R0bjY2ZThDYjZUeEJnSWdmdm5SMDEyRXVySE0KUGJmQ2FOTGZ1Wkk2cjliL2hXNTlHRkk5Q3RiT29qdz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpCDgoEU0hBMhIGU0hBMjU2SuEFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI5RENDQVp1Z0F3SUJBZ0lKQUwvd1hZQXF5OW9lTUFvR0NDcUdTTTQ5QkFNQ01GNHhDekFKQmdOVkJBWVQKQWtkQ01ROHdEUVlEVlFRSURBWk1iMjVrYjI0eER6QU5CZ05WQkFjTUJreHZibVJ2YmpFUU1BNEdBMVVFQ2d3SApUM0prWlhKbGNqRWJNQmtHQTFVRUF3d1NZMkV1YzNWd2NHeDVZMmhoYVc0dGJtVjBNQjRYRFRJeE1ETXpNREEwCk16VXdPVm9YRFRJME1ERXhPREEwTXpVd09Wb3dYakVMTUFrR0ExVUVCaE1DUjBJeER6QU5CZ05WQkFnTUJreHYKYm1SdmJqRVBNQTBHQTFVRUJ3d0dURzl1Wkc5dU1SQXdEZ1lEVlFRS0RBZFBjbVJsY21WeU1Sc3dHUVlEVlFRRApEQkpqWVM1emRYQndiSGxqYUdGcGJpMXVaWFF3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVFYCmVLMWpPd2toRGJ1Rk1HcXhtMWJOU3R3d1psL1VNSllTaXlTN1dzS3dGcWNtUzR0ejYvZlYxNmV2WmNqNU9zbGQKNlVRR1lZZ3VoMld6ZnVrN0xoUklvMEl3UURBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUE0R0ExVWREd0VCL3dRRQpBd0lCcGpBZEJnTlZIUTRFRmdRVURIMjlISVhLMFkzSlh0LzhCUFp1d2ZpUWFNQXdDZ1lJS29aSXpqMEVBd0lEClJ3QXdSQUlnUllwbm5DU01OemtRUzIvTFVCNnpaVTlOK0tHZTlPZXRkNHpJNmxDYW9Pd0NJQzRET3FHd0JCNWUKT2ZzMVpzRWtlZ2dmZnUrSkJqOW5nWWpmVFdhclFNSWQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoaBkFkbWlucyI3CgdSZWFkZXJzEiwSIggBEh4SCBIGCAESAggAGhISEAoOc3VwcGx5Y2hhaW5NU1AaBkFkbWlucyI3CgdXcml0ZXJzEiwSIggBEh4SCBIGCAESAggAGhISEAoOc3VwcGx5Y2hhaW5NU1AaBkFkbWlucyI4CgZBZG1pbnMSLhIkCAESIBIIEgYIARICCAAaFBISCg5zdXBwbHljaGFpbk1TUBABGgZBZG1pbnMiOwoLRW5kb3JzZW1lbnQSLBIiCAESHhIIEgYIARICCAAaEhIQCg5zdXBwbHljaGFpbk1TUBoGQWRtaW5zKgZBZG1pbnMaIgoJQmF0Y2hTaXplEhUSCwgKEICAgDEYgIBAGgZBZG1pbnMaHgoMQmF0Y2hUaW1lb3V0Eg4SBAoCMnMaBkFkbWlucxofChNDaGFubmVsUmVzdHJpY3Rpb25zEggaBkFkbWlucxokCgxDYXBhYmlsaXRpZXMSFBIKCggKBFYyXzASABoGQWRtaW5zGvIRCg1Db25zZW5zdXNUeXBlEuAREtURCghldGNkcmFmdBLIEQqxEQoab3JkZXJlcjEuZGV2ZWxvcC5sb2NhbC5jb20Q+0EaxggtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQy9EQ0NBcU9nQXdJQkFnSVVGMlJLelNaSHp0em5vbTl0ZGNRT0dRVEFDK2d3Q2dZSUtvWkl6ajBFQXdJdwpYakVMTUFrR0ExVUVCaE1DUjBJeER6QU5CZ05WQkFnTUJreHZibVJ2YmpFUE1BMEdBMVVFQnd3R1RHOXVaRzl1Ck1SQXdEZ1lEVlFRS0RBZFBjbVJsY21WeU1Sc3dHUVlEVlFRRERCSmpZUzV6ZFhCd2JIbGphR0ZwYmkxdVpYUXcKSGhjTk1qRXdNek13TURRME1EQXdXaGNOTWpJd016TXdNRFEwTlRBd1dqQnVNUXN3Q1FZRFZRUUdFd0pIUWpFYgpNQmtHQTFVRUJ4TVNOVEV1TlRBdkxUQXVNVE12VEc5dVpHOXVNUkF3RGdZRFZRUUtFd2RQY21SbGNtVnlNUTB3CkN3WURWUVFMRXdSd1pXVnlNU0V3SHdZRFZRUURFeGh2Y21SbGNtVnlNUzV6ZFhCd2JIbGphR0ZwYmkxdVpYUXcKV1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVFUSUw5TlU3U3owd2VQa2d1NUx0RWRlb2ptcXlEQgozd0dQcGlaTEFBV0FnZ0RPN0g2TmNOSkMwb25UV2lSMGpvTlNEK1c5SFRWSHU0cEFzSkc0V0hNVW80SUJMVENDCkFTa3dEZ1lEVlIwUEFRSC9CQVFEQWdPb01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0QKQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjBHQTFVZERnUVdCQlJTdEZHbjJpUkZxVWNWYjFVOUxuYWFoR2lvcERBZgpCZ05WSFNNRUdEQVdnQlFNZmIwY2hjclJqY2xlMy93RTltN0IrSkJvd0RBL0JnTlZIUkVFT0RBMmdoaHZjbVJsCmNtVnlNUzV6ZFhCd2JIbGphR0ZwYmkxdVpYU0NHbTl5WkdWeVpYSXhMbVJsZG1Wc2IzQXViRzlqWVd3dVkyOXQKTUdrR0NDb0RCQVVHQndnQkJGMTdJbUYwZEhKeklqcDdJbWhtTGtGbVptbHNhV0YwYVc5dUlqb2lJaXdpYUdZdQpSVzV5YjJ4c2JXVnVkRWxFSWpvaWIzSmtaWEpsY2pFdWMzVndjR3g1WTJoaGFXNHRibVYwSWl3aWFHWXVWSGx3ClpTSTZJbkJsWlhJaWZYMHdDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdJOGZxekM3SmRQd1lxdmVSMlpacWpzVUwKd0RUOHFlMkd3bmkvQXNMVDNtb0NJSG1XL3RiZTltS003Uk4xcXdUcExJQWpSR01hZDNDUC9CQzhmMXJlc0lPcgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCiLGCC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDL0RDQ0FxT2dBd0lCQWdJVUYyUkt6U1pIenR6bm9tOXRkY1FPR1FUQUMrZ3dDZ1lJS29aSXpqMEVBd0l3ClhqRUxNQWtHQTFVRUJoTUNSMEl4RHpBTkJnTlZCQWdNQmt4dmJtUnZiakVQTUEwR0ExVUVCd3dHVEc5dVpHOXUKTVJBd0RnWURWUVFLREFkUGNtUmxjbVZ5TVJzd0dRWURWUVFEREJKallTNXpkWEJ3YkhsamFHRnBiaTF1WlhRdwpIaGNOTWpFd016TXdNRFEwTURBd1doY05Nakl3TXpNd01EUTBOVEF3V2pCdU1Rc3dDUVlEVlFRR0V3SkhRakViCk1Ca0dBMVVFQnhNU05URXVOVEF2TFRBdU1UTXZURzl1Wkc5dU1SQXdEZ1lEVlFRS0V3ZFBjbVJsY21WeU1RMHcKQ3dZRFZRUUxFd1J3WldWeU1TRXdId1lEVlFRREV4aHZjbVJsY21WeU1TNXpkWEJ3YkhsamFHRnBiaTF1WlhRdwpXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0FBUVRJTDlOVTdTejB3ZVBrZ3U1THRFZGVvam1xeURCCjN3R1BwaVpMQUFXQWdnRE83SDZOY05KQzBvblRXaVIwam9OU0QrVzlIVFZIdTRwQXNKRzRXSE1VbzRJQkxUQ0MKQVNrd0RnWURWUjBQQVFIL0JBUURBZ09vTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjRApBakFNQmdOVkhSTUJBZjhFQWpBQU1CMEdBMVVkRGdRV0JCUlN0RkduMmlSRnFVY1ZiMVU5TG5hYWhHaW9wREFmCkJnTlZIU01FR0RBV2dCUU1mYjBjaGNyUmpjbGUzL3dFOW03QitKQm93REEvQmdOVkhSRUVPREEyZ2hodmNtUmwKY21WeU1TNXpkWEJ3YkhsamFHRnBiaTF1WlhTQ0dtOXlaR1Z5WlhJeExtUmxkbVZzYjNBdWJHOWpZV3d1WTI5dApNR2tHQ0NvREJBVUdCd2dCQkYxN0ltRjBkSEp6SWpwN0ltaG1Ma0ZtWm1sc2FXRjBhVzl1SWpvaUlpd2lhR1l1ClJXNXliMnhzYldWdWRFbEVJam9pYjNKa1pYSmxjakV1YzNWd2NHeDVZMmhoYVc0dGJtVjBJaXdpYUdZdVZIbHcKWlNJNkluQmxaWElpZlgwd0NnWUlLb1pJemowRUF3SURSd0F3UkFJZ0k4ZnF6QzdKZFB3WXF2ZVIyWlpxanNVTAp3RFQ4cWUyR3duaS9Bc0xUM21vQ0lIbVcvdGJlOW1LTTdSTjFxd1RwTElBalJHTWFkM0NQL0JDOGYxcmVzSU9yCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KEhIKBTUwMG1zEAoYASAFKICAgAgaBkFkbWlucyIiCgdSZWFkZXJzEhcSDQgDEgkKB1JlYWRlcnMaBkFkbWlucyIiCgdXcml0ZXJzEhcSDQgDEgkKB1dyaXRlcnMaBkFkbWlucyIiCgZBZG1pbnMSGBIOCAMSCgoGQWRtaW5zEAIaBkFkbWlucyIqCg9CbG9ja1ZhbGlkYXRpb24SFxINCAMSCQoHV3JpdGVycxoGQWRtaW5zKgZBZG1pbnMS40YKC0NvbnNvcnRpdW1zEtNGEohGChVTdXBwbHlDaGFpbkNvbnNvcnRpdW0S7kUSpiMKD21hbnVmYWN0dXJlck1TUBKSIxqaIQoDTVNQEpIhEochEoQhCg9tYW51ZmFjdHVyZXJNU1AS9QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQ0FUQ0NBYWVnQXdJQkFnSUpBSzJUU0hHQTk1SVFNQW9HQ0NxR1NNNDlCQU1DTUdReEN6QUpCZ05WQkFZVApBa05JTVE4d0RRWURWUVFJREFaYWRYSnBZMmd4RHpBTkJnTlZCQWNNQmxwMWNtbGphREVWTUJNR0ExVUVDZ3dNClRXRnVkV1poWTNSMWNtVnlNUnd3R2dZRFZRUUREQk5qWVM1dFlXNTFabUZqZEhWeVpYSXRibVYwTUI0WERUSXgKTURNek1EQTBNelV5TWxvWERUSTBNREV4T0RBME16VXlNbG93WkRFTE1Ba0dBMVVFQmhNQ1EwZ3hEekFOQmdOVgpCQWdNQmxwMWNtbGphREVQTUEwR0ExVUVCd3dHV25WeWFXTm9NUlV3RXdZRFZRUUtEQXhOWVc1MVptRmpkSFZ5ClpYSXhIREFhQmdOVkJBTU1FMk5oTG0xaGJuVm1ZV04wZFhKbGNpMXVaWFF3V1RBVEJnY3Foa2pPUFFJQkJnZ3EKaGtqT1BRTUJCd05DQUFUK0xDSEFrK0Y0clZ2dkRLaXMvV3FrcUN6b3FGK0dBOCt6NmpTZ0l1dUxDQTBSUTdCMApJenlUNGFUa0lLYmMrbi9wVkdUQ2oxbEtDd1ptSzBwSUZsRmhvMEl3UURBUEJnTlZIUk1CQWY4RUJUQURBUUgvCk1BNEdBMVVkRHdFQi93UUVBd0lCcGpBZEJnTlZIUTRFRmdRVUc5OFlkY25vb3duOUJBYTg5bm15SWZmUWxQRXcKQ2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQUk3YmU5ZXM5eDM0SXVNU3d1NmYwUkFyVVRSNVRRL3ZpOVNSdWhyQQpHcXRLQWlBOEwxYzNxU1pOd0FFMlIxVzdCZjVHY3Y2ZWZUMjJBa01KYkZRcG52aThPZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KIucILS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFakNDQXJtZ0F3SUJBZ0lVUE51VDRlMEt0RkNHNDRQRW5uWHVRVUpOcFNzd0NnWUlLb1pJemowRUF3SXcKWkRFTE1Ba0dBMVVFQmhNQ1EwZ3hEekFOQmdOVkJBZ01CbHAxY21samFERVBNQTBHQTFVRUJ3d0dXblZ5YVdObwpNUlV3RXdZRFZRUUtEQXhOWVc1MVptRmpkSFZ5WlhJeEhEQWFCZ05WQkFNTUUyTmhMbTFoYm5WbVlXTjBkWEpsCmNpMXVaWFF3SGhjTk1qRXdNek13TURRME1EQXdXaGNOTWpJd016TXdNRFEwTlRBd1dqQ0JoekVMTUFrR0ExVUUKQmhNQ1EwZ3hHakFZQmdOVkJBY1RFVFEzTGpNNEx6Z3VOVFF2V25WeWFXTm9NUlV3RXdZRFZRUUtFd3hOWVc1MQpabUZqZEhWeVpYSXhKREFOQmdOVkJBc1RCbU5zYVdWdWREQVRCZ05WQkFzVERFMWhiblZtWVdOMGRYSmxjakVmCk1CMEdBMVVFQXd3V1FXUnRhVzVBYldGdWRXWmhZM1IxY21WeUxXNWxkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUcKU000OUF3RUhBMElBQkFDNXVuaWljaTFFdUlqSFJGamEyVW04bHRWMGt4MlVhN3pxVDZsblZmam1Db2hnbHVoUQpSV3JZczl1TE9TeGNWZUNHMVg4ZmlWT0M0MU1PdGpkdkxLaWpnZ0VqTUlJQkh6QU9CZ05WSFE4QkFmOEVCQU1DCkI0QXdEQVlEVlIwVEFRSC9CQUl3QURBZEJnTlZIUTRFRmdRVXZ4bWM5UXpXMFBIRUczSzlITElLeUdyTzlJa3cKSHdZRFZSMGpCQmd3Rm9BVUc5OFlkY25vb3duOUJBYTg5bm15SWZmUWxQRXdKQVlEVlIwUkJCMHdHNElaWTJFdApkRzl2YkhNdE9EVmlPV0kwTldNNU9TMW9jSFp4ZURDQm1BWUlLZ01FQlFZSENBRUVnWXQ3SW1GMGRISnpJanA3CkltRmlZV011YVc1cGRDSTZJblJ5ZFdVaUxDSmhaRzFwYmlJNkluUnlkV1VpTENKb1ppNUJabVpwYkdsaGRHbHYKYmlJNklrMWhiblZtWVdOMGRYSmxjaUlzSW1obUxrVnVjbTlzYkcxbGJuUkpSQ0k2SWtGa2JXbHVRRzFoYm5WbQpZV04wZFhKbGNpMXVaWFFpTENKb1ppNVVlWEJsSWpvaVkyeHBaVzUwSW4xOU1Bb0dDQ3FHU000OUJBTUNBMGNBCk1FUUNJQVVLL3FDMExkTVJTbGFPRzcySllCK3dGc1hQMmk4QUwzVmZaM3FxcTEvUEFpQllqakVMRytFcGlpdSsKV2FiT3NNU0RJNUJxQXJRQkVidWdaQzB5N3lmbHN3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpCDgoEU0hBMhIGU0hBMjU2SvUFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNBVENDQWFlZ0F3SUJBZ0lKQUsyVFNIR0E5NUlRTUFvR0NDcUdTTTQ5QkFNQ01HUXhDekFKQmdOVkJBWVQKQWtOSU1ROHdEUVlEVlFRSURBWmFkWEpwWTJneER6QU5CZ05WQkFjTUJscDFjbWxqYURFVk1CTUdBMVVFQ2d3TQpUV0Z1ZFdaaFkzUjFjbVZ5TVJ3d0dnWURWUVFEREJOallTNXRZVzUxWm1GamRIVnlaWEl0Ym1WME1CNFhEVEl4Ck1ETXpNREEwTXpVeU1sb1hEVEkwTURFeE9EQTBNelV5TWxvd1pERUxNQWtHQTFVRUJoTUNRMGd4RHpBTkJnTlYKQkFnTUJscDFjbWxqYURFUE1BMEdBMVVFQnd3R1duVnlhV05vTVJVd0V3WURWUVFLREF4TllXNTFabUZqZEhWeQpaWEl4SERBYUJnTlZCQU1NRTJOaExtMWhiblZtWVdOMGRYSmxjaTF1WlhRd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxCmhrak9QUU1CQndOQ0FBVCtMQ0hBaytGNHJWdnZES2lzL1dxa3FDem9xRitHQTgrejZqU2dJdXVMQ0EwUlE3QjAKSXp5VDRhVGtJS2JjK24vcFZHVENqMWxLQ3dabUswcElGbEZobzBJd1FEQVBCZ05WSFJNQkFmOEVCVEFEQVFILwpNQTRHQTFVZER3RUIvd1FFQXdJQnBqQWRCZ05WSFE0RUZnUVVHOThZZGNub293bjlCQWE4OW5teUlmZlFsUEV3CkNnWUlLb1pJemowRUF3SURTQUF3UlFJaEFJN2JlOWVzOXgzNEl1TVN3dTZmMFJBclVUUjVUUS92aTlTUnVockEKR3F0S0FpQThMMWMzcVNaTndBRTJSMVc3QmY1R2N2NmVmVDIyQWtNSmJGUXBudmk4T2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tClqGDAgBEoAGCvUFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNBVENDQWFlZ0F3SUJBZ0lKQUsyVFNIR0E5NUlRTUFvR0NDcUdTTTQ5QkFNQ01HUXhDekFKQmdOVkJBWVQKQWtOSU1ROHdEUVlEVlFRSURBWmFkWEpwWTJneER6QU5CZ05WQkFjTUJscDFjbWxqYURFVk1CTUdBMVVFQ2d3TQpUV0Z1ZFdaaFkzUjFjbVZ5TVJ3d0dnWURWUVFEREJOallTNXRZVzUxWm1GamRIVnlaWEl0Ym1WME1CNFhEVEl4Ck1ETXpNREEwTXpVeU1sb1hEVEkwTURFeE9EQTBNelV5TWxvd1pERUxNQWtHQTFVRUJoTUNRMGd4RHpBTkJnTlYKQkFnTUJscDFjbWxqYURFUE1BMEdBMVVFQnd3R1duVnlhV05vTVJVd0V3WURWUVFLREF4TllXNTFabUZqZEhWeQpaWEl4SERBYUJnTlZCQU1NRTJOaExtMWhiblZtWVdOMGRYSmxjaTF1WlhRd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxCmhrak9QUU1CQndOQ0FBVCtMQ0hBaytGNHJWdnZES2lzL1dxa3FDem9xRitHQTgrejZqU2dJdXVMQ0EwUlE3QjAKSXp5VDRhVGtJS2JjK24vcFZHVENqMWxLQ3dabUswcElGbEZobzBJd1FEQVBCZ05WSFJNQkFmOEVCVEFEQVFILwpNQTRHQTFVZER3RUIvd1FFQXdJQnBqQWRCZ05WSFE0RUZnUVVHOThZZGNub293bjlCQWE4OW5teUlmZlFsUEV3CkNnWUlLb1pJemowRUF3SURTQUF3UlFJaEFJN2JlOWVzOXgzNEl1TVN3dTZmMFJBclVUUjVUUS92aTlTUnVockEKR3F0S0FpQThMMWMzcVNaTndBRTJSMVc3QmY1R2N2NmVmVDIyQWtNSmJGUXBudmk4T2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIGY2xpZW50Gv4FCvUFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNBVENDQWFlZ0F3SUJBZ0lKQUsyVFNIR0E5NUlRTUFvR0NDcUdTTTQ5QkFNQ01HUXhDekFKQmdOVkJBWVQKQWtOSU1ROHdEUVlEVlFRSURBWmFkWEpwWTJneER6QU5CZ05WQkFjTUJscDFjbWxqYURFVk1CTUdBMVVFQ2d3TQpUV0Z1ZFdaaFkzUjFjbVZ5TVJ3d0dnWURWUVFEREJOallTNXRZVzUxWm1GamRIVnlaWEl0Ym1WME1CNFhEVEl4Ck1ETXpNREEwTXpVeU1sb1hEVEkwTURFeE9EQTBNelV5TWxvd1pERUxNQWtHQTFVRUJoTUNRMGd4RHpBTkJnTlYKQkFnTUJscDFjbWxqYURFUE1BMEdBMVVFQnd3R1duVnlhV05vTVJVd0V3WURWUVFLREF4TllXNTFabUZqZEhWeQpaWEl4SERBYUJnTlZCQU1NRTJOaExtMWhiblZtWVdOMGRYSmxjaTF1WlhRd1dUQVRCZ2NxaGtqT1BRSUJCZ2dxCmhrak9QUU1CQndOQ0FBVCtMQ0hBaytGNHJWdnZES2lzL1dxa3FDem9xRitHQTgrejZqU2dJdXVMQ0EwUlE3QjAKSXp5VDRhVGtJS2JjK24vcFZHVENqMWxLQ3dabUswcElGbEZobzBJd1FEQVBCZ05WSFJNQkFmOEVCVEFEQVFILwpNQTRHQTFVZER3RUIvd1FFQXdJQnBqQWRCZ05WSFE0RUZnUVVHOThZZGNub293bjlCQWE4OW5teUlmZlFsUEV3CkNnWUlLb1pJemowRUF3SURTQUF3UlFJaEFJN2JlOWVzOXgzNEl1TVN3dTZmMFJBclVUUjVUUS92aTlTUnVockEKR3F0S0FpQThMMWMzcVNaTndBRTJSMVc3QmY1R2N2NmVmVDIyQWtNSmJGUXBudmk4T2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIEcGVlchoGQWRtaW5zIjgKB1dyaXRlcnMSLRIjCAESHxIIEgYIARICCAAaExIRCg9tYW51ZmFjdHVyZXJNU1AaBkFkbWlucyI5CgZBZG1pbnMSLxIlCAESIRIIEgYIARICCAAaFRITCg9tYW51ZmFjdHVyZXJNU1AQARoGQWRtaW5zIjwKC0VuZG9yc2VtZW50Ei0SIwgBEh8SCBIGCAESAggAGhMSEQoPbWFudWZhY3R1cmVyTVNQGgZBZG1pbnMiOAoHUmVhZGVycxItEiMIARIfEggSBggBEgIIABoTEhEKD21hbnVmYWN0dXJlck1TUBoGQWRtaW5zKgZBZG1pbnMS5yEKCmNhcnJpZXJNU1AS2CEa9B8KA01TUBLsHxLhHxLeHwoKY2Fycmllck1TUBLZBS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCN1RDQ0FaT2dBd0lCQWdJSkFNUHJsOW9pOE5LWk1Bb0dDQ3FHU000OUJBTUNNRm94Q3pBSkJnTlZCQVlUCkFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdmJqRVFNQTRHQTFVRUNnd0gKUTJGeWNtbGxjakVYTUJVR0ExVUVBd3dPWTJFdVkyRnljbWxsY2kxdVpYUXdIaGNOTWpFd016TXdNRFF6TlRNMApXaGNOTWpRd01URTRNRFF6TlRNMFdqQmFNUXN3Q1FZRFZRUUdFd0pIUWpFUE1BMEdBMVVFQ0F3R1RHOXVaRzl1Ck1ROHdEUVlEVlFRSERBWk1iMjVrYjI0eEVEQU9CZ05WQkFvTUIwTmhjbkpwWlhJeEZ6QVZCZ05WQkFNTURtTmgKTG1OaGNuSnBaWEl0Ym1WME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRXk1T0pHSUpISXNTSwp4ejJhdUpwS21xVzV2c1F1ZnFzTFkvOUtybDU4R0x1YnNZbXExUWRzdW10REoySjdyMUFQbzc5QjhiU01hNWdFCmhXTk9HZndJQjZOQ01FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWUQKVlIwT0JCWUVGSnFkSTRmNDQrV1JaL2hXeVV4ZzdYVXp1QU8rTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFEQgpqTEhJc3FKVHZ2Q05BRnRLNXhDWHkrU2U1N29rN2Q5U1pWYXhlRGZWNGdJZ2RmRGFXL2s2U0hXdjdGeS9tTzFFClVON3dJd0ZoK1A5ZksvTXJNNTQwdXJjPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCiK2CC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlDOERDQ0FwYWdBd0lCQWdJVVJ2MTlLL0FvYXpyWkZzam54SzIvTU1JcXhKTXdDZ1lJS29aSXpqMEVBd0l3CldqRUxNQWtHQTFVRUJoTUNSMEl4RHpBTkJnTlZCQWdNQmt4dmJtUnZiakVQTUEwR0ExVUVCd3dHVEc5dVpHOXUKTVJBd0RnWURWUVFLREFkRFlYSnlhV1Z5TVJjd0ZRWURWUVFEREE1allTNWpZWEp5YVdWeUxXNWxkREFlRncweQpNVEF6TXpBd05EUXdNREJhRncweU1qQXpNekF3TkRRMU1EQmFNSGt4Q3pBSkJnTlZCQVlUQWtkQ01Sc3dHUVlEClZRUUhFeEkxTVM0MU1DOHRNQzR4TXk5TWIyNWtiMjR4RURBT0JnTlZCQW9UQjBOaGNuSnBaWEl4SHpBTkJnTlYKQkFzVEJtTnNhV1Z1ZERBT0JnTlZCQXNUQjBOaGNuSnBaWEl4R2pBWUJnTlZCQU1NRVVGa2JXbHVRR05oY25KcApaWEl0Ym1WME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUwyNWRsV1BldkJ2WGtxMXhEa0NpCmQ2ZXhZbU0vTEVoR3VTZmRPNldhNHF4M1dtQnI1ZlByTWNnUGZmUWlRZUU0bmtDTzlTL1dteXJQYWMxUGcwVTcKT2FPQ0FSa3dnZ0VWTUE0R0ExVWREd0VCL3dRRUF3SUhnREFNQmdOVkhSTUJBZjhFQWpBQU1CMEdBMVVkRGdRVwpCQlRLekp2Tm5kZTJyTXJlMGRGUzQ5Y0kxSDAwWGpBZkJnTlZIU01FR0RBV2dCU2FuU09IK09QbGtXZjRWc2xNCllPMTFNN2dEdmpBa0JnTlZIUkVFSFRBYmdobGpZUzEwYjI5c2N5MDROV0k1WWpRMVl6azVMVzFzYlRSM01JR08KQmdncUF3UUZCZ2NJQVFTQmdYc2lZWFIwY25NaU9uc2lZV0poWXk1cGJtbDBJam9pZEhKMVpTSXNJbUZrYldsdQpJam9pZEhKMVpTSXNJbWhtTGtGbVptbHNhV0YwYVc5dUlqb2lRMkZ5Y21sbGNpSXNJbWhtTGtWdWNtOXNiRzFsCmJuUkpSQ0k2SWtGa2JXbHVRR05oY25KcFpYSXRibVYwSWl3aWFHWXVWSGx3WlNJNkltTnNhV1Z1ZENKOWZUQUsKQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBbSs2OHRnY2NpT3V4aXJEay9TYnQxU2Q1YUVHc0JWbnRzaDlBbDBzSQpmdVlDSUNkVXJjcjNqQ3c1ZTVxeEpWQlAyMTBCSUt1Y2VzVnNSeWkrc3BpRWsrc3cKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQpCDgoEU0hBMhIGU0hBMjU2StkFLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI3VENDQVpPZ0F3SUJBZ0lKQU1Qcmw5b2k4TktaTUFvR0NDcUdTTTQ5QkFNQ01Gb3hDekFKQmdOVkJBWVQKQWtkQ01ROHdEUVlEVlFRSURBWk1iMjVrYjI0eER6QU5CZ05WQkFjTUJreHZibVJ2YmpFUU1BNEdBMVVFQ2d3SApRMkZ5Y21sbGNqRVhNQlVHQTFVRUF3d09ZMkV1WTJGeWNtbGxjaTF1WlhRd0hoY05NakV3TXpNd01EUXpOVE0wCldoY05NalF3TVRFNE1EUXpOVE0wV2pCYU1Rc3dDUVlEVlFRR0V3SkhRakVQTUEwR0ExVUVDQXdHVEc5dVpHOXUKTVE4d0RRWURWUVFIREFaTWIyNWtiMjR4RURBT0JnTlZCQW9NQjBOaGNuSnBaWEl4RnpBVkJnTlZCQU1NRG1OaApMbU5oY25KcFpYSXRibVYwTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFeTVPSkdJSkhJc1NLCnh6MmF1SnBLbXFXNXZzUXVmcXNMWS85S3JsNThHTHVic1ltcTFRZHN1bXRESjJKN3IxQVBvNzlCOGJTTWE1Z0UKaFdOT0dmd0lCNk5DTUVBd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBYVl3SFFZRApWUjBPQkJZRUZKcWRJNGY0NCtXUlovaFd5VXhnN1hVenVBTytNQW9HQ0NxR1NNNDlCQU1DQTBnQU1FVUNJUURCCmpMSElzcUpUdnZDTkFGdEs1eENYeStTZTU3b2s3ZDlTWlZheGVEZlY0Z0lnZGZEYVcvazZTSFd2N0Z5L21PMUUKVU43d0l3RmgrUDlmSy9Nck01NDB1cmM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KWs4LCAES5AUK2QUtLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS0KTUlJQjdUQ0NBWk9nQXdJQkFnSUpBTVBybDlvaThOS1pNQW9HQ0NxR1NNNDlCQU1DTUZveEN6QUpCZ05WQkFZVApBa2RDTVE4d0RRWURWUVFJREFaTWIyNWtiMjR4RHpBTkJnTlZCQWNNQmt4dmJtUnZiakVRTUE0R0ExVUVDZ3dIClEyRnljbWxsY2pFWE1CVUdBMVVFQXd3T1kyRXVZMkZ5Y21sbGNpMXVaWFF3SGhjTk1qRXdNek13TURRek5UTTAKV2hjTk1qUXdNVEU0TURRek5UTTBXakJhTVFzd0NRWURWUVFHRXdKSFFqRVBNQTBHQTFVRUNBd0dURzl1Wkc5dQpNUTh3RFFZRFZRUUhEQVpNYjI1a2IyNHhFREFPQmdOVkJBb01CME5oY25KcFpYSXhGekFWQmdOVkJBTU1EbU5oCkxtTmhjbkpwWlhJdGJtVjBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUV5NU9KR0lKSElzU0sKeHoyYXVKcEttcVc1dnNRdWZxc0xZLzlLcmw1OEdMdWJzWW1xMVFkc3VtdERKMko3cjFBUG83OUI4YlNNYTVnRQpoV05PR2Z3SUI2TkNNRUF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFPQmdOVkhROEJBZjhFQkFNQ0FhWXdIUVlEClZSME9CQllFRkpxZEk0ZjQ0K1dSWi9oV3lVeGc3WFV6dUFPK01Bb0dDQ3FHU000OUJBTUNBMGdBTUVVQ0lRREIKakxISXNxSlR2dkNOQUZ0SzV4Q1h5K1NlNTdvazdkOVNaVmF4ZURmVjRnSWdkZkRhVy9rNlNIV3Y3RnkvbU8xRQpVTjd3SXdGaCtQOWZLL01yTTU0MHVyYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoSBmNsaWVudBriBQrZBS0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlCN1RDQ0FaT2dBd0lCQWdJSkFNUHJsOW9pOE5LWk1Bb0dDQ3FHU000OUJBTUNNRm94Q3pBSkJnTlZCQVlUCkFrZENNUTh3RFFZRFZRUUlEQVpNYjI1a2IyNHhEekFOQmdOVkJBY01Ca3h2Ym1SdmJqRVFNQTRHQTFVRUNnd0gKUTJGeWNtbGxjakVYTUJVR0ExVUVBd3dPWTJFdVkyRnljbWxsY2kxdVpYUXdIaGNOTWpFd016TXdNRFF6TlRNMApXaGNOTWpRd01URTRNRFF6TlRNMFdqQmFNUXN3Q1FZRFZRUUdFd0pIUWpFUE1BMEdBMVVFQ0F3R1RHOXVaRzl1Ck1ROHdEUVlEVlFRSERBWk1iMjVrYjI0eEVEQU9CZ05WQkFvTUIwTmhjbkpwWlhJeEZ6QVZCZ05WQkFNTURtTmgKTG1OaGNuSnBaWEl0Ym1WME1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRXk1T0pHSUpISXNTSwp4ejJhdUpwS21xVzV2c1F1ZnFzTFkvOUtybDU4R0x1YnNZbXExUWRzdW10REoySjdyMUFQbzc5QjhiU01hNWdFCmhXTk9HZndJQjZOQ01FQXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQWFZd0hRWUQKVlIwT0JCWUVGSnFkSTRmNDQrV1JaL2hXeVV4ZzdYVXp1QU8rTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFEQgpqTEhJc3FKVHZ2Q05BRnRLNXhDWHkrU2U1N29rN2Q5U1pWYXhlRGZWNGdJZ2RmRGFXL2s2U0hXdjdGeS9tTzFFClVON3dJd0ZoK1A5ZksvTXJNNTQwdXJjPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tChIEcGVlchoGQWRtaW5zIjMKB1dyaXRlcnMSKBIeCAESGhIIEgYIARICCAAaDhIMCgpjYXJyaWVyTVNQGgZBZG1pbnMiNAoGQWRtaW5zEioSIAgBEhwSCBIGCAESAggAGhASDgoKY2Fycmllck1TUBABGgZBZG1pbnMiNwoLRW5kb3JzZW1lbnQSKBIeCAESGhIIEgYIARICCAAaDhIMCgpjYXJyaWVyTVNQGgZBZG1pbnMiMwoHUmVhZGVycxIoEh4IARIaEggSBggBEgIIABoOEgwKCmNhcnJpZXJNU1AaBkFkbWlucyoGQWRtaW5zGkAKFUNoYW5uZWxDcmVhdGlvblBvbGljeRInEgwIAxIICgZBZG1pbnMaFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zKhcvQ2hhbm5lbC9PcmRlcmVyL0FkbWlucyItCgZBZG1pbnMSIxIICAESBBICEgAaFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zKhcvQ2hhbm5lbC9PcmRlcmVyL0FkbWlucxomChBIYXNoaW5nQWxnb3JpdGhtEhISCAoGU0hBMjU2GgZBZG1pbnMaLQoZQmxvY2tEYXRhSGFzaGluZ1N0cnVjdHVyZRIQEgYI/////w8aBkFkbWlucxpOChBPcmRlcmVyQWRkcmVzc2VzEjoSHwodb3JkZXJlcjEuc3VwcGx5Y2hhaW4tbmV0OjcwNTAaFy9DaGFubmVsL09yZGVyZXIvQWRtaW5zGiQKDENhcGFiaWxpdGllcxIUEgoKCAoEVjJfMBIAGgZBZG1pbnMiIgoHUmVhZGVycxIXEg0IAxIJCgdSZWFkZXJzGgZBZG1pbnMiIgoHV3JpdGVycxIXEg0IAxIJCgdXcml0ZXJzGgZBZG1pbnMiIgoGQWRtaW5zEhgSDggDEgoKBkFkbWlucxACGgZBZG1pbnMqBkFkbWlucxoOCgQKAgoACgAKAAoACgA=
